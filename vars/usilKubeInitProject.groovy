def call(def trigrammeAppli) {

stage("Initialisation d'un projet kube: ${trigrammeAppli} "){
    usilColorLog("stage", "Initialisation d'un projet kube: ${trigrammeAppli}")

    namespaceStatus = sh (script : "~/kubectl get namespace ${trigrammeAppli} --no-headers --output=go-template={{.metadata.name}} 2>/dev/null || true", returnStdout: true)

    if (namespaceStatus == trigrammeAppli) {
        usilColorLog("info", "Projet déjà initié")
        sh "exit 0"
    }
    else {

        if (fileExists("init")) {
            usilColorLog("debug", "Le répertoire init existe, à supprimer")
            sh ("rm -Rf init")
        } 
        usilColorLog("debug", "Le répertoire init va être créé")
        sh ("mkdir init")

        // Initialisation des variables commande
        kubeCreateNS = "~/kubectl create namespace ${trigrammeAppli}"
        kubeCreateSecretIntg = "~/kubectl apply -f init/secret-intg.yaml"
        kubeCreateSecretRecf = "~/kubectl apply -f init/secret-recf.yaml"
        kubeCreateSAccount = "~/kubectl apply -f init/serviceAccount.yaml"
        kubeCreateRBinding = "~/kubectl apply -f init/roleBinding.yaml"
        kubeCreateRole = "~/kubectl apply -f init/role.yaml"
        kubeConfigSet = "~/kubectl config set-context cluster-anteprod-${trigrammeAppli} " +
                        "--cluster=cluster-anteprod --user=sifront-api --namespace=${trigrammeAppli}"
        kubeConfigView = "~/kubectl config view"

        // Lancement des commandes
        logExec("kubeCreateNS", kubeCreateNS)
        serviceAccount(trigrammeAppli)
        logExec("kubeCreateSAccount", kubeCreateSAccount)
        secretIntg(trigrammeAppli)
        logExec("kubeCreateSecretIntg", kubeCreateSecretIntg)
        secretRecf(trigrammeAppli)
        logExec("kubeCreateSecretRecf", kubeCreateSecretRecf)
        roleBinding(trigrammeAppli) 
        logExec("kubeCreateRBinding", kubeCreateRBinding)
        role(trigrammeAppli)
        logExec("kubeCreateRole", kubeCreateRole)
        logExec("kubeConfigSet", kubeConfigSet)
        logExec("kubeConfigView", kubeConfigView)

        }
    }
}
def logExec(def name, def commande) {
    usilColorLog("info", "${name} commande: ${commande}")
    sh ("${commande}")
}

def serviceAccount (def trigrammeAppli) {

    def configYaml = '''
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trigrammeAppli-service-account
    '''

    usilColorLog("debug", "Création du fichier init/serviceAccount.yaml")
    def configYamlTRI = configYaml.replaceAll("trigrammeAppli","${trigrammeAppli}")
    usilColorLog("debug", "${configYamlTRI}")
    writeFile file: "init/serviceAccount.yaml", text: configYamlTRI
}

def roleBinding (def trigrammeAppli) {
    // Génération du roleBinding.yaml
    def configYaml = '''
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: trigrammeAppli-psp-rolebinding
  namespace: trigrammeAppli
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mh-psp-role
subjects:
- kind: ServiceAccount
  name: trigrammeAppli-service-account
  namespace: trigrammeAppli'''

    usilColorLog("debug", "Création du fichier roleBinding.yaml")
    def configYamlTRI = configYaml.replaceAll("trigrammeAppli","${trigrammeAppli}")
    usilColorLog("debug", "${configYamlTRI}")
    writeFile file: "init/roleBinding.yaml", text: configYamlTRI
}

def role (def trigrammeAppli) {
    // Génération du role.yaml
    def configYaml = '''
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mh-psp-role
  namespace: trigrammeAppli
rules:
- apiGroups:
  - policy
  resourceNames:
  - mh-restricted
  resources:
  - podsecuritypolicies
  verbs:
  - use'''

    usilColorLog("debug", "Création du fichier init/role.yaml")
    def configYamlTRI = configYaml.replaceAll("trigrammeAppli","${trigrammeAppli}")
    usilColorLog("debug", "${configYamlTRI}")
    writeFile file: "init/role.yaml", text: configYamlTRI
}

def secretIntg (def trigrammeAppli) {
    // Génération du secret-intg.yaml
    def configYaml = '''
---
apiVersion: v1
data:
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRREhsR0taUHUzR01mM1gKbnl4dnpOVTNreWtabGtGUDlGa2tOMWhJVlpoZ2FzYVFDbU5RM0lobWsrSmFuUHh2Ui9yanczcThhVFVEYVRscwo2OEJEQ3RRVUhuaC9ZN1lVMGdBUUVnT1NmR29yMm1FamdzOHB1M2dOMDJUbXVDaWFrV0tMWXBVMUMyblJmMElWCjNUMWFzZWxDRUFiK1liTHI3QkUzcXN4RnZIaW9aZlhvRWI3bGRYb0JGd01zYlhXdnJGeHM0aEpOcjY0amhKbXEKZUZQTk53NytCdmFWdEdJblZab0tNQ3dqc0VxRUp1Q3ZzNGlNZmwrYjdjU3JTajBhUnBYanlJY2xrdHI3Z1RiYQpib3lFL09NblpwUC9IQklUUUdWMEZYZG9jVi9selRPQmlFME5MWHNJUXlReDQvQm41eFc5NkZHT3pHZDVENndjCjN0aFNlODYxQWdJUUFRS0NBUUFMZHNSb25Na2NzVlExcXIvVzd2WFF0RjZMNzVoY2NqZ21SNTdqT2JkYkZIRTIKeUlHWFZvdVlLenh0ZzBJaUYvYUt3cThDVGJ2bFU5WnZPeGZQc203SVpnOGd0UG54S0g0NUNNMjlCQld0bE5LeQpQeXEwV29wZEpZZytQWnQ3ZncwWW0wQkpQUFFQMHdmbUxkM2Q0c1ZGTEs1R284Z1Z6S2l5c2tVQzNERUE4Z2ZTCi9TMjc5Z29BNjVzajRjb3hVY2FqZ0Q3ZlRIa1lUVHI5WU95cjhjVjcvRXVsc0V3VkxMcVk4N2NWTVo4RXJ2L1gKckRzLzhJU3BaVWZ4eGJ1UUJTOGJJSlQyK1dSdEpxNW41SndobHM1amY4dGhObWFFQW5ZeHk4VzB5UHFXOXgwbwpCdElYQ05JQjBuRFJ1NkxMTjN4MkRkcHQxN0hYTGpIRkdVUXFRN1RKQW9HQkFQUldwcDR6aWJ2NlBIa015Z0t1Cis4WnZsVlFka3NDT3FuWFhONkt4d1FMaFU2NU5FN0ZOalF1Z0NFOUdzZklNYXdOZjlEZ3U1K2pLd0NXTk1uZUYKMTRwRWRYUHV1MGZDdGJMVzgxQ2RSYkVHa2JnQzJybDlab0VKcEx0UTdIc25xUkZpZjlFQXM2WUg0bEcwVm9XagozS0Z3dWE1S0hHNkFUVVE0aE04dFdxcFBBb0dCQU5FYTNlQ1lEZW9vM3ZIK1hmMUxhMEVsTTBFN1hyUk1hbmc5CmNkSVpoYkNJSHBBWXc3NVJOcHB0OTVIQ3I0UVMram1lSXA4cWhCVXBUT3hLQUdPYVc5MnoxcFoxVmRvUFE5aFAKbVZqZUM0T3dBOFRyYzh5aTV1Q0hLWDkxZ1lHcHpFQkY3R1NQQ3JOWnhLMUZIZFc3RGJqN1BYWS90WFV3aU13agpiWmFwYVdtN0FvR0JBTStLcGVVS2VOMm5QK3paa0FoSEpuYXdZbGpSa3hWbjMxVXBCelJHd1EvaGNvRnVaVlRPCkZuUDVOM3ZpMGdJRmJKU1V2TEh3dXZ5WWVMaGI4S0dDSG40UlNMVnovTjJxRXI1RnUxMUh5amxEZ0pYTkVBT1gKMFJtUUdIT2VCd294and0VWVsQnRFZEJ5cTUydzNIVERhN3h0ZnVtbFhOSVU0RmR3amMwb05nUlJBb0dCQUpTUwp2dVBmMG1aMEJMSFFtZUtWb0MrWlpvYkR0V0xzNEJ6U1hlNWlIVkZRcUM0RnVVRjl2K0ppWVB3WGl5UTYrUVhDCmRwT1ZEZTNySzJoM1VESEdaME5yeUpVRXMyaHlzaHhwUzNiZzRFRGkyWUFyRXVzUVZPL2pFTnozd3ozaXZtMEcKNFVLalBuYnZMVVFRRGVNM2JKbmRjQ2MzYzQ3QVFqUnhKcC9aQ01vSEFvR0JBTFBIbEZ5RXJKd0EzSUV6WG1qbQpLeWZ3WFBXUC9mZVhmQkcvSFFPZWdTRlZDZGVRMlVseHVTVDFUY2c1U3NZS1g0RVl3MVg5R3BCNGxtUFVLcTMwClNQM3BPNUtDZ1FBZ1JwVjFlNVQzN3NUWnJuWDJvZmdYVTVmNzMwMlcvcHlwZmtUcEJHa3lrK3BBWUZldTRPNHYKWFZlbUMvaGZnL0w0ZDNBb3RIbklGUWk5Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: int-mycloud-secret
  namespace: trigrammeAppli'''

    usilColorLog("debug", "Création du fichier init/secret-intg.yaml")
    def configYamlTRI = configYaml.replaceAll("trigrammeAppli","${trigrammeAppli}")
    usilColorLog("debug", "${configYamlTRI}")
    writeFile file: "init/secret-intg.yaml", text: configYamlTRI
}

def secretRecf (def trigrammeAppli) {
    // Génération du secret-recf.yaml
    def configYaml = '''
---
apiVersion: v1
data:
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdXdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLVXdnZ1NoQWdFQUFvSUJBUURGaFJKdHFJUnBReVphDQpMVjdvMDg4WWJFNTJrbCt4dDBjYVlwclpsb2hWL0ZGTDVwT290bWdDWDY0STR0dkUwUDArWDR0enRDaHRnaTc0DQphUE80ZC9Wd1poWStHUGczZVQwQ0dBVndhOC9Ec2FuaWNiWXZDM01wY0h4MllQU2YzaU5OcndPRDl0VmtZTnprDQpTYmhHc2FiNjBoamtFejVDV0tyRUlvdzVGS0tmL0NNeHM2TC8vOFk2TjQ1N0t6eHRENmFhdDR2elR3cHo4ZGVDDQo5ZzNkYWFybkFwV3RKbDRNYkFScEcyZ09LcDRaN3NHWjJEN1hwQkM1Nk16cXFCVDVPNXpFSmFiZFpsajFVeXphDQpwNTF1UFZJM0g3TUxnUUF3NFgxZnRWWFN0c3liUysxTXFnYkQ4YnZQVFdzTUNWSG9XWFZqYWRaNVNmQ0VjZzFJDQoyMDVkcllKTkFnSVFBUUtDQVFBVTdubGtlVmZlTlIxOE1lYXpwL2tHdVBvTUsyYUk5ZFgwQ2cyNUQzRWh5eVMyDQpZdDFJOVlaVFJkL3gxMWtiU0ZKOVlnVXZ3MW5JdndOUHI3cEVmQVMyZHBWczQ1SUJBVHh4Q2NDTTVIU1JKOVVuDQpPNG5rV1BraXVrNE1kaVRoQkFPTndITzFmdVNxMjh3Q2tvZENuM3F6WlpRUGdVZHM5dHZzRU1ockpqV080WGxqDQpCUHJFSENucVZjNEU0QXN6c1AzNE5IVk1RN0pReE1HSUZSbWZuYXE4cHRWOFl4VzhTVjA2Nk96REduRnkrNnFODQpyUVV0RFY0STRzck9aOWpFOS9FQXFJa09yWXEzSS9HVmFqNTRuc3FVdjVaVUFUbW1tcGFMcS82RXgzTWdEQzBCDQpMYmUrTnladTA0alJKWVJlcTJXWXdMZHpFSStOQUx0b1daQ1VOV3FEQW9HQkFPb3JRV0NJZWpJcTFmNkw0eEkyDQpLeDhsR1J2VURlUFpCd1owSHM5MWtyT3hRZDhKWDU0Y2hacnA1UGRidnZZci94Vno3cjZ1emZXRm9FUzFlV3VzDQpoQzExNmpBMUFhMXNDQkdpb1piMStkNFlwY0F1T0xYT3NSNGwxVGhHYjRYeXppOVJ2N1A5UEoyOExzYlNZVzM5DQoydkRNZEZyc2g3K0FNZVVXcUh6K3h6OW5Bb0dCQU5mdkl5S1YzMXkvSC96ejQwcjVVUlVSUEF2QVo0ZlpXaVFrDQpEc0h5blJ4SW4yYjVxTlFTVFlnSVZHT25xU2lYRG5JbnFUc1NoWkI5TFMwWUJGVklQR0VRL0x0SHBzeVFHTDkyDQpaSkpYWjFxRUorZVBnYmRpZnZ0OUhjaXFFSFI3S0FoUzJqV0cwUTVPU1krR2dnRWtWQTJFTkNabTFhQzZsbWxNDQpvWEVSSGNRckFvR0FiYTdKQkptbkpXNmF1RVlsVUFOQW45MXpuRC9sUTV0RUJsV2gxVFRTSGUzODdKK3FRWDlrDQo0ZlhWV0U0RzV3Yk1aVmFyUDhJSmZaOXd6eVBUVmF6SVlJWm1BWlc4SFczMktHQ2JpdkV1clpMUytvbi9FYnhxDQpWR3FTNjk3Qjg3STJWZVgrWUgxc3YxcGtnLzN3cG0yMzU3Sk9ubTlKNUtuVXd2Z2VEaTY2alpzQ2dZQWFUTTFLDQo4Zk1HN0JuMEFiWWxUK3FTRitnQ0xsMjNBVnFWbmNxdmxjVW5qNS94WEhSNkRsbnNZNzJNQ3p3MzNta3I5WFdXDQppT2tXK05CajZCNkZPMmtrZ1BtNmRTTlAxdENXeWMvRGw4eHFrRkNYZkZQWVNjczdqNVVYa0w3VlEyeTV0L3gxDQpuZ0szd3ExclZYMmVxYkppUDJjaisyZHdEYnBYVHBFQjVpZHQzd0tCZ0ZwS3VrZzljMDRBTjloOS93WWYxY1pUDQpIcVkvWGpWR0xaMUQwRm9aRGZNNWJyR25EbFZqUzBzNisxRENEMkg4TW85M1VYOEJzWWRpYUFNVmt3TDNwQ3FDDQo2dWdXZXFJL0pJV01TZ1RiNmZ1VXBtQkVhV2FJNVFUODhoYm9LYndhWWYvdTY1VmFoSDd6TmZUQjI2YWhVR2swDQp6c2RpSDY3RDBSdGVrc2hicjE1Tw0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==
kind: Secret
metadata:
  name: recf-mycloud-secret
  namespace: trigrammeAppli'''

    usilColorLog("debug", "Création du fichier init/secret-recf.yaml")
    def configYamlTRI = configYaml.replaceAll("trigrammeAppli","${trigrammeAppli}")
    usilColorLog("debug", "${configYamlTRI}")
    writeFile file: "init/secret-recf.yaml", text: configYamlTRI
}
